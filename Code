/**
* Manages the save plates spreadsheet
* @author Alex Herbig
*/


/**
* Moves all cells with text in them to the top of the page. Empty cells are overwritten
*
* @param cells the cells that the function will be able to edit. Represented by a 2D string array
* @return cells a 2D string array with all whitespace between the top and cell contents removed
*/
function collapseWhiteSpace_(cells) {
  //If input is null, empty string, etc
  if (!cells) {
    return cells;
  }
  
  var row = 0;
  var col = 0;
  var rows = cells.length;
  var cols = cells[0].length;
  var targetRow = 0;
  var targetCol = 0;
  var contents = "";
  
  //loop through all the values in cells
  for (row = 0; row < rows; row++) {
    for (col = 0; col < cols; col++) {
      
      //We don't want to check the current cell, only cells above it.
      targetRow = row - 1;
      targetCol = col;
      contents = cells[row][col];
      
      //If contents is null, undefined, etc, treat as empty string
      if (!contents) {
        contents = "";
      }
      
      //Stop if targetRow = -1 or the cell at targetRow has contents in it.
      while (targetRow >= 0 && cells[targetRow][targetCol].length == 0) {
        targetRow--;
      }
      
      //increment targetRow to point to the last valid cell
      targetRow++;
      cells[row][col] = "";
      cells[targetRow][targetCol] = contents;
      
    }
  }
  return cells;
}

/**
* Runs every day at 7pm, clears the non-starred save plate requests from the day
*/
function clearNonStarsDay() {
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("SavePlates");
  
  //Get all the cells that would have names in them
  var range = sheet.getRange(2, 1, 40, 9);
  var cells = range.getDisplayValues();
  
  var day = new Date().getDay();
  //Day will correspond to a column. We want it to be lined up with today's lunch
  day = (day - 1) * 2
  
  //If it's sunday or monday, don't clear any days
  if (day < 0) {
    cells = collapseWhiteSpace_(cells);
    range.setValues(cells);
    return;
  }
  
  var row = 0;
  var col = 0;
  var startCol = day;
  var endCol = day + 1;
  var rows = cells.length;
  var cols = cells[0].length;
  var contents = "";
  
  //Don't try to do a column outside of our range
  if (endCol > 8) {
    endCol = 8;
  }

  for (row = 0; row < rows; row++) {
    for (col = startCol; col <= endCol; col++) {
      
      contents = cells[row][col];
      
      //If contents is null, undefined, etc, treat as empty string
      if (!contents) {
        contents = "";
      }
      
      //If the cell does not contain a "*"
      if (contents.indexOf("*") == -1) {
        cells[row][col] = "";
      }
      
    }
  }
  cells = collapseWhiteSpace_(cells);
  range.setValues(cells);
}

/**
* Takes the input from the newest form submission from the responses sheet and looks at the days that were selected
* Puts the person's name in the column for each meal they selected on the save plates sheet
*
* @param e the array of cells that are edited on form submission
*/
function onFormSubmit(e) {
  
  var rangeEdited = e.range

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var saveplates = ss.getSheetByName("SavePlates");
  var range = saveplates.getRange(2, 1, 40, 9);
  var targetcells = range.getDisplayValues();
  
  var stringsArray = rangeEdited.getDisplayValues();
  var cellArray = stringsArray[0];
  var name = standardizeName_(cellArray[2]);
  //True if they want to remove a save plate, false if they're adding a save plate
  if (!cellArray[3]) {
    cellArray[3] = "";
  }
  var remove = (cellArray[3].indexOf("Remove") > -1);
  var meals = cellArray[1];
  var meal = meals.split(",");
  
  for (var i = 0; i < meal.length; i++) {
    var str = meal[i];
    var col = 0;
    //Determines where the name will be placed on the saveplate sheet
    //Determines the column
    if (str.indexOf("Monday Lunch") > -1) {
      col = 0;
    } else if (str.indexOf("Monday Dinner") > -1) {
      col = 1;
    } else if (str.indexOf("Tuesday Lunch") > -1) {
      col = 2;
    } else if (str.indexOf("Tuesday Dinner") > -1) {
      col = 3;
    } else if (str.indexOf("Wednesday Lunch") > -1) {
      col = 4;
    } else if (str.indexOf("Wednesday Dinner") > -1) {
      col = 5;
    } else if (str.indexOf("Thursday Lunch") > -1) {
      col = 6;
    } else if (str.indexOf("Thursday Dinner") > -1) {
      col = 7;
    } else if (str.indexOf("Friday Lunch") > -1) {
      col = 8;
    }
    
    //If they selected remove, remove their name instead of adding their name.
    if (remove) {
      targetcells = remove_(name, col, targetcells);
    } else {
      
      for (var row = 0; row < 40; row++) {
        var checkString = targetcells[row][col];
        if (!checkString) {
          checkString = "";
        }
        if (checkString.length == 0) {
          var targetRow = row;
          break;
        }
      }
      /*if (containsStarred(name, col, targetcells)) {
        Logger.log("True");
      } else {
        Logger.log("False");
        targetcells = remove_(name, col, targetcells);
        targetcells[targetRow][col] = name;
      }*/
      if (!containsStarred_(name, col, targetcells)) {
        targetcells = remove_(name, col, targetcells);
        targetcells[targetRow][col] = name;
        targetcells = collapseWhiteSpace_(targetcells);
      }
    }
  }
  
  range.setValues(targetcells);
  
}

/**
* Capitalizes the first letter of each word in submission
* Makes everything else lowercase
*
* @param rawName the string input that the user enters on the form
*/
function standardizeName_(rawName) {
  rawName = rawName.toLowerCase();
  var nameParts = rawName.split(" ");
  var outString = "";
  for (var i = 0; i < nameParts.length; i++) {
    var string = nameParts[i];
    if (string.length >= 1) {
      var firstChar = string.slice(0,1);
      firstChar = firstChar.toUpperCase();
      var otherChars = string.slice(1);
      string = firstChar + otherChars;
    } else {
      string = string.toUpperCase();
    }
    
    //Just for JT, because he's the only name that looks weird after this
    string.replace("Jt", "JT");
    
    outString = outString + " " + string;
    outString = outString.trim();
  }
  return outString;
  
}

/**
* Removes all names that match the input name from a column in targetcells
*
* @param name the name to purge from the column
* @param col the column of targetcells to search through
* @param targetcells a 2D string array containing the contents of all the cell that can contain names
*/
function remove_(name, col, targetcells) {
  //standardize the input name
  name = name.replace("*", "");
  name = standardizeName_(name);
  
  for (var row = 0; row < targetcells.length; row ++) {
    var cellName = targetcells[row][col];
    cellName = cellName.replace("*", "");
    cellName = standardizeName_(cellName);
    
    // If the input name matches the name in the cell, delete the name in the cell
    if (name.indexOf(cellName) > -1) {
      targetcells[row][col] = "";
    }
  }
  targetcells = collapseWhiteSpace_(targetcells);
  return targetcells;
}

/**
 * Checks if the col contains the name given but with a star
 *
 * @param name the name to check with the column
 * @param col, the column of targetcells to search through
 * @param targetcells a 2D string array containing the contents of all the cell that can contain names
 */
function containsStarred_(name, col, targetcells) {
  name = name.replace("*", "");
  name = standardizeName_(name);
  name = name + "*";
  
  for (var row = 0; row < targetcells.length; row++) {
    var targetName = targetcells[row][col];
    targetName = standardizeName_(targetName);
    Logger.log("name: " + name);
    Logger.log("targetName: " + targetName);
    if (targetName.indexOf(name) > -1) {
      Logger.log("True");
      return row;
    }
  }
  Logger.log("False");
  return false;
}
